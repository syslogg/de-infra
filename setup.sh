#!/bin/bash

# setup.sh - Script para inicializar o ambiente no WSL2

echo "üöÄ Configurando ambiente Data Lake com MinIO, Trino e Hive Metastore (WSL2)"

# Verificar se est√° rodando no WSL2
if grep -qi microsoft /proc/version; then
    echo "‚úÖ WSL2 detectado"
    WSL_HOST_IP=$(grep nameserver /etc/resolv.conf | awk '{print $2}')
    echo "üåê IP do host Windows: $WSL_HOST_IP"
else
    echo "‚ö†Ô∏è  WSL2 n√£o detectado, mas continuando..."
fi

# Criar estrutura de diret√≥rios
echo "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p config/trino/catalog
mkdir -p config

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. No WSL2, certifique-se que:"
    echo "   1. Docker Desktop est√° rodando no Windows"
    echo "   2. A integra√ß√£o WSL2 est√° habilitada"
    echo "   3. Sua distribui√ß√£o WSL est√° habilitada no Docker Desktop"
    exit 1
fi

echo "‚úÖ Docker est√° rodando"

# Criar configura√ß√µes do Hive
echo "üìù Criando configura√ß√µes do Hive Metastore..."

cat > config/hive-site.xml << 'EOF'
<?xml version="1.0"?>
<configuration>
  <!-- Database Configuration -->
  <property>
    <n>javax.jdo.option.ConnectionURL</n>
    <value>jdbc:postgresql://postgres:5432/metastore</value>
  </property>
  
  <property>
    <n>javax.jdo.option.ConnectionDriverName</n>
    <value>org.postgresql.Driver</value>
  </property>
  
  <property>
    <n>javax.jdo.option.ConnectionUserName</n>
    <value>hive</value>
  </property>
  
  <property>
    <n>javax.jdo.option.ConnectionPassword</n>
    <value>hive123</value>
  </property>

  <!-- S3/MinIO Configuration -->
  <property>
    <n>fs.s3a.endpoint</n>
    <value>http://minio:9000</value>
  </property>
  
  <property>
    <n>fs.s3a.access.key</n>
    <value>admin</value>
  </property>
  
  <property>
    <n>fs.s3a.secret.key</n>
    <value>admin123</value>
  </property>
  
  <property>
    <n>fs.s3a.path.style.access</n>
    <value>true</value>
  </property>
  
  <property>
    <n>fs.s3a.impl</n>
    <value>org.apache.hadoop.fs.s3a.S3AFileSystem</value>
  </property>

  <!-- Warehouse Configuration -->
  <property>
    <n>hive.metastore.warehouse.dir</n>
    <value>/tmp/warehouse</value>
    <description>Local warehouse directory for metastore initialization</description>
  </property>
  
  <property>
    <n>hive.metastore.uris</n>
    <value>thrift://hive-metastore:9083</value>
  </property>
  
  <!-- Schema Validation -->
  <property>
    <n>hive.metastore.schema.verification</n>
    <value>false</value>
  </property>
  
  <property>
    <n>datanucleus.schema.autoCreateAll</n>
    <value>true</value>
  </property>
  
  <property>
    <n>hive.metastore.schema.verification.record.version</n>
    <value>false</value>
  </property>
</configuration>
EOF

cat > config/core-site.xml << 'EOF'
<?xml version="1.0"?>
<configuration>
  <!-- S3A Configuration -->
  <property>
    <n>fs.s3a.endpoint</n>
    <value>http://minio:9000</value>
  </property>
  
  <property>
    <n>fs.s3a.access.key</n>
    <value>admin</value>
  </property>
  
  <property>
    <n>fs.s3a.secret.key</n>
    <value>admin123</value>
  </property>
  
  <property>
    <n>fs.s3a.path.style.access</n>
    <value>true</value>
  </property>
  
  <property>
    <n>fs.s3a.connection.ssl.enabled</n>
    <value>false</value>
  </property>
  
  <property>
    <n>fs.s3a.impl</n>
    <value>org.apache.hadoop.fs.s3a.S3AFileSystem</value>
  </property>
  
  <!-- Default FS Configuration -->
  <property>
    <n>fs.defaultFS</n>
    <value>file:///</value>
  </property>
</configuration>
EOF

# Criar configura√ß√µes do Trino
echo "üìù Criando configura√ß√µes do Trino..."

cat > config/trino/config.properties << EOF
coordinator=true
node-scheduler.include-coordinator=true
http-server.http.port=8080
discovery.uri=http://localhost:8080
query.max-memory=2GB
query.max-memory-per-node=1GB
discovery.sharing-enabled=true
EOF

cat > config/trino/node.properties << EOF
node.environment=development
node.id=trino-coordinator
node.data-dir=/data/trino
EOF

cat > config/trino/jvm.config << EOF
-server
-Xmx2G
-XX:InitialRAMPercentage=80
-XX:MaxRAMPercentage=80
-XX:G1HeapRegionSize=32M
-XX:+ExplicitGCInvokesConcurrent
-XX:+ExitOnOutOfMemoryError
-XX:+UseG1GC
-XX:-UseBiasedLocking
-XX:ReservedCodeCacheSize=256M
-XX:PerMethodRecompilationCutoff=10000
-XX:PerBytecodeRecompilationCutoff=10000
-Djdk.attach.allowAttachSelf=true
-Djdk.nio.maxCachedBufferSize=2000000
-XX:+UnlockDiagnosticVMOptions
-XX:G1NumCollectionsKeepPinned=10000000
EOF

cat > config/trino/catalog/hive.properties << EOF
connector.name=hive
hive.metastore.uri=thrift://hive-metastore:9083
hive.s3.endpoint=http://minio:9000
hive.s3.path-style-access=true
hive.s3.ssl.enabled=false
hive.s3.aws-access-key=admin
hive.s3.aws-secret-key=admin123
hive.allow-drop-table=true
hive.allow-rename-table=true
hive.storage-format=PARQUET
hive.compression-codec=SNAPPY
EOF

cat > config/trino/catalog/memory.properties << EOF
connector.name=memory
memory.max-data-per-node=128MB
EOF

# Criar bucket no MinIO via script Python
cat > setup_minio.py << 'EOF'
#!/usr/bin/env python3
import time
import requests
from minio import Minio
from minio.error import BucketAlreadyOwnedByYou, BucketAlreadyExists

def setup_minio():
    print("‚è≥ Aguardando MinIO ficar dispon√≠vel...")
    
    # Aguardar MinIO ficar dispon√≠vel
    max_retries = 30
    for i in range(max_retries):
        try:
            response = requests.get("http://localhost:9000/minio/health/live", timeout=5)
            if response.status_code == 200:
                break
        except:
            pass
        time.sleep(2)
        if i == max_retries - 1:
            print("‚ùå MinIO n√£o ficou dispon√≠vel")
            return False
    
    print("‚úÖ MinIO est√° dispon√≠vel")
    
    # Configurar cliente MinIO
    client = Minio(
        "localhost:9000",
        access_key="admin",
        secret_key="admin123",
        secure=False
    )
    
    # Criar bucket warehouse
    try:
        client.make_bucket("warehouse")
        print("‚úÖ Bucket 'warehouse' criado com sucesso")
    except BucketAlreadyOwnedByYou:
        print("‚ÑπÔ∏è  Bucket 'warehouse' j√° existe")
    except BucketAlreadyExists:
        print("‚ÑπÔ∏è  Bucket 'warehouse' j√° existe")
    
    # Criar bucket para dados de exemplo
    try:
        client.make_bucket("data")
        print("‚úÖ Bucket 'data' criado com sucesso")
    except BucketAlreadyOwnedByYou:
        print("‚ÑπÔ∏è  Bucket 'data' j√° existe")
    except BucketAlreadyExists:
        print("‚ÑπÔ∏è  Bucket 'data' j√° existe")
    
    return True

if __name__ == "__main__":
    setup_minio()
EOF

echo "üì¶ Iniciando servi√ßos..."
docker-compose up -d

echo "‚è≥ Aguardando servi√ßos ficarem prontos (pode demorar mais no WSL2)..."
echo "   Isso pode levar 2-3 minutos no primeiro startup..."

# Aguardar mais tempo no WSL2
sleep 45

# Verificar status dos servi√ßos
echo "üîç Verificando status dos servi√ßos..."
docker-compose ps

# Aguardar MinIO especificamente
echo "‚è≥ Aguardando MinIO ficar dispon√≠vel..."
for i in {1..30}; do
    if curl -f -s http://localhost:9000/minio/health/live > /dev/null 2>&1; then
        echo "‚úÖ MinIO est√° pronto"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ö†Ô∏è  MinIO demorou para ficar pronto, mas continuando..."
    fi
    sleep 2
done

# Verificar se Python est√° dispon√≠vel e instalar depend√™ncias se necess√°rio
if command -v python3 &> /dev/null; then
    echo "üêç Configurando buckets no MinIO..."
    pip3 install minio requests 2>/dev/null || echo "‚ö†Ô∏è  Instale as depend√™ncias: pip install minio requests"
    python3 setup_minio.py
else
    echo "‚ö†Ô∏è  Python3 n√£o encontrado. Configure os buckets manualmente via web interface"
fi

echo ""
echo "üéâ Ambiente configurado com sucesso no WSL2!"
echo ""
echo "üìã Servi√ßos dispon√≠veis:"
echo "   ‚Ä¢ MinIO Web UI: http://localhost:9001 (admin/admin123)"
echo "   ‚Ä¢ MinIO API: http://localhost:9000"
echo "   ‚Ä¢ Trino Web UI: http://localhost:8080"
echo "   ‚Ä¢ Hive Metastore: localhost:9083"
echo "   ‚Ä¢ PostgreSQL: localhost:5432 (hive/hive123)"
echo ""
echo "üîß Para testar o Trino no WSL2:"
echo "   docker exec -it trino-coordinator trino"
echo "   Ent√£o execute: SHOW CATALOGS;"
echo ""
echo "üìä Para verificar logs se algo n√£o funcionar:"
echo "   docker-compose logs trino"
echo "   docker-compose logs hive-metastore"
echo "   docker-compose logs minio"
echo ""
echo "üåê DICA WSL2: Se n√£o conseguir acessar do Windows:"
echo "   Use: http://\$(hostname -I | awk '{print \$1}'):9001 no Windows"
echo "   Ou configure port forwarding: netsh interface portproxy add..."
echo ""
echo "üõë Para parar os servi√ßos:"
echo "   docker-compose down"
echo ""
echo "üßπ Para limpar tudo (cuidado, remove dados!):"
echo "   docker-compose down -v"
EOF